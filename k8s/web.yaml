apiVersion: apps/v1
kind: Deployment
metadata:
  name: msms-web
  namespace: msms
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate: { maxUnavailable: 0, maxSurge: 1 }
  selector:
    matchLabels: { app: msms-web }
  template:
    metadata:
      labels: { app: msms-web }
    spec:
      # ⬇⬇⬇ 就在这里新增 initContainers（与 containers 同级）
      initContainers:
      - name: wait-for-postgres
        image: postgres:15
        command: [ "sh", "-c" ]
        args:
          - |
            echo "Waiting for Postgres...";
            until pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER"; do
              sleep 2;
            done;
            echo "Postgres is ready.";
        envFrom:
        - configMapRef: { name: msms-config }
        - secretRef: { name: msms-secrets }

      containers:
      - name: web
        image: msms:v1
        imagePullPolicy: IfNotPresent
        ports: [ { containerPort: 8000 } ]
        envFrom:
        - configMapRef: { name: msms-config }
        - secretRef: { name: msms-secrets }
        readinessProbe:
          httpGet: { path: "/", port: 8000 }
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 2
        livenessProbe:
          httpGet: { path: "/", port: 8000 }
          initialDelaySeconds: 30
          periodSeconds: 20
          timeoutSeconds: 2
        args:
        - sh
        - -c
        - >
          python manage.py collectstatic --noinput &&
          python manage.py migrate &&
          python manage.py seed || true &&
          gunicorn msms.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 60
---
apiVersion: v1
kind: Service
metadata:
  name: msms-svc
  namespace: msms
spec:
  selector: { app: msms-web }
  ports:
  - port: 80
    targetPort: 8000
  type: NodePort
